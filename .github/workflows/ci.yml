name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run CI checks
        run: just ci-check

      - name: Install Moon CLI directly (right before tests)
        run: |
          echo "=== INSTALLING MOON CLI TO /usr/local/bin ==="
          echo "Current PATH: $PATH"
          echo "Installing Moon CLI..."
          
          # Install Moon to default location first
          bash <(curl -fsSL https://moonrepo.dev/install/moon.sh)
          
          # Copy Moon to /usr/local/bin so it's in default PATH for child processes
          sudo cp "$HOME/.moon/bin/moon" /usr/local/bin/moon
          sudo chmod +x /usr/local/bin/moon
          
          echo ""
          echo "=== MOON INSTALLATION VERIFICATION ==="
          echo "Moon accessible via 'which moon': $(which moon)"
          echo "Moon version: $(moon --version)"
          echo "Moon binary details: $(ls -la /usr/local/bin/moon)"
          echo "Moon binary permissions: $(stat -c '%A %U:%G' /usr/local/bin/moon)"
          echo "PATH contains /usr/local/bin: $(echo $PATH | grep -o '/usr/local/bin' || echo 'NOT FOUND')"
          echo ""
          echo "=== CHILD PROCESS TEST ==="
          echo "Testing Moon in fresh environment (simulating test conditions):"
          env -i PATH="/usr/local/bin:/usr/bin:/bin" bash -c "which moon && moon --version"
          echo ""
          echo "=== ENVIRONMENT CHECK ==="
          echo "CI environment variables:"
          echo "  CI=${CI}"
          echo "  GITHUB_ACTIONS=${GITHUB_ACTIONS}"
          echo "  HOME=${HOME}"
          echo ""

      - name: Run tests
        run: |
          echo "=== RUNNING TESTS ==="
          echo "Moon binary location before tests: $(which moon)"
          echo "Moon accessible via PATH: $(moon --version)"
          just ci-test

  build:
    name: Build for ${{ matrix.target }}
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: moonflare-linux-amd64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: moonflare-linux-amd64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: moonflare-linux-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: moonflare-macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: moonflare-macos-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: moonflare-windows-amd64.exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: moonflare-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
          fi

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Install cargo-cross (for cross-compilation)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary
        shell: bash
        run: just build-target ${{ matrix.target }}

      - name: Prepare binary for upload
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp moonflare.exe ../../../${{ matrix.name }}
          else
            cp moonflare ../../../${{ matrix.name }}
            strip ../../../${{ matrix.name }}
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}
          retention-days: 1