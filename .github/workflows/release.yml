name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run release prep checks
        run: just release-prep

  goreleaser:
    name: GoReleaser Build & Release
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runner_os: Linux
          - os: macos-latest
            runner_os: Darwin
          - os: windows-2025
            runner_os: Windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain (Linux)
        if: matrix.runner_os == 'Linux'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install Rust toolchain (macOS)
        if: matrix.runner_os == 'Darwin'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install Rust toolchain (Windows)
        if: matrix.runner_os == 'Windows'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable-msvc

      - name: Install Zig (Linux only)
        if: matrix.runner_os == 'Linux'
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild (Linux only)
        if: matrix.runner_os == 'Linux'
        run: cargo install --locked cargo-zigbuild

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUNNER_OS: ${{ matrix.runner_os }}