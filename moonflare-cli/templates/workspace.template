FILE:.moon/workspace.yml
$schema: "https://moonrepo.dev/schemas/workspace.json"

projects:
  globs:
    - "apps/*"
    - "sites/*"
    - "workers/*"
    - "crates/*"
  sources:
    shared-wasm: "shared-wasm"

FILE:.moon/toolchain.yml
$schema: "https://moonrepo.dev/schemas/toolchain.json"

proto:
  version: "0.52.1"

node:
  version: "latest"
  packageManager: "pnpm"

rust:
  version: "latest"

typescript:
  includeProjectReferenceSources: true
  includeSharedTypes: true


FILE:shared-wasm/moon.yml
$schema: 'https://moonrepo.dev/schemas/project.json'
language: 'node'
layer: 'tool'

tasks:
  gather:
    description: 'Copy built .wasm from crates/* into shared-wasm/'
    command: 'node'
    args: ['gather-wasm.cjs']
    outputs:
      - '*.wasm'

FILE:shared-wasm/gather-wasm.cjs
const fs = require('fs');
const path = require('path');

console.log('🔍 Gathering WASM files...');

// Remove old WASM files
try {
  const files = fs.readdirSync('.');
  files.filter(f => f.endsWith('.wasm')).forEach(f => {
    fs.unlinkSync(f);
  });
} catch (e) {
  // Directory might not exist or no files to remove
}

const workspaceRoot = process.env.workspaceRoot || path.resolve('..');
const cratesDir = path.join(workspaceRoot, 'crates');
let wasmFilesFound = false;

// Get all crate directories
const crateList = fs.readdirSync(cratesDir).filter(item => {
  return fs.statSync(path.join(cratesDir, item)).isDirectory();
});

console.log(`📦 Found ${crateList.length} crate(s): ${crateList.join(', ')}`);

// Look for built WASM files
for (const crateName of crateList) {
  const wasmDir = path.join(cratesDir, crateName, 'target', 'wasm32-unknown-unknown', 'release');
  
  if (fs.existsSync(wasmDir)) {
    const wasmFiles = fs.readdirSync(wasmDir).filter(f => f.endsWith('.wasm'));
    
    for (const wasmFile of wasmFiles) {
      console.log(`📋 Copying ${wasmFile} from ${crateName}`);
      fs.copyFileSync(path.join(wasmDir, wasmFile), wasmFile);
      wasmFilesFound = true;
    }
  } else {
    console.error(`❌ No WASM build found for crate '${crateName}'`);
    console.error(`   Run: cd crates/${crateName} && cargo build --target wasm32-unknown-unknown --release`);
  }
}

if (!wasmFilesFound) {
  console.error('❌ No built WASM files found!');
  console.error('   Build your crates first with: moon run crates/*:build');
  process.exit(1);
}

console.log('✅ WASM gather completed successfully');

FILE:shared-wasm/.keep


FILE:package.json
{
  "name": "{{name}}",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "engines": {
    "node": ">=18"
  },
  "scripts": {
    "build": "moon run :build",
    "dev": "moon run :dev", 
    "test": "moon run :test",
    "lint": "moon run :lint",
    "format": "moon run :format",
    "check": "moon run :check"
  },
  "devDependencies": {
    "@moonrepo/cli": "latest"
  }
}

FILE:pnpm-workspace.yaml
packages:
  - 'apps/*'
  - 'sites/*'
  - 'workers/*'

FILE:justfile
default:
    @brew install git unzip gzip xz yq
    @proto pin node stable --to local
    @proto pin rust stable --to local
    @mkdir -p apps crates sites workers shared-wasm
    @touch apps/.keep
    @touch sites/.keep
    @touch workers/.keep
    @touch shared-wasm/.keep
    @moon setup

create-project dest tmpl example_dir:
    @curl -L -o repo.zip https://github.com/cloudflare/templates/archive/refs/heads/main.zip && unzip repo.zip "templates-main/{{ example_dir }}/*" && mv templates-main/{{ example_dir }} {{ dest }} && rm -r templates-main repo.zip
    @moon generate {{ tmpl }} {{ dest }}

astro dest:
    @mkdir -p sites
    @moonflare add astro {{ dest }}

react dest:
    @mkdir -p apps
    @moonflare add react {{ dest }}

durable-object dest:
    @mkdir -p workers
    @moonflare add durable-object {{ dest }}

crate dest:
    @mkdir -p crates
    @moonflare add crate {{ dest }}

check:
    @moon :check

lint:
    @moon :lint

format:
    @moon :format

fix:
    @moon :fix

test:
    @moon :test

build:
    @moon :build

FILE:.gitignore
# Dependencies
node_modules/
target/
dist/

# Build outputs
*.wasm

# Environment
.env
.env.local
.env.production

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Moon
.moon/cache/

FILE:README.md
# {{name}}

A Cloudflare-focused monorepo managed with [Moonflare](https://github.com/moonflare-dev/moonflare).

## Getting Started

```bash
# Install dependencies
npm install

# Build all projects
npm run build

# Start development
npm run dev
```

## Structure

- `apps/` - React applications
- `sites/` - Astro static sites  
- `workers/` - Cloudflare Workers and Durable Objects
- `crates/` - Rust libraries compiled to WebAssembly
- `shared-wasm/` - Compiled WASM artifacts

## Commands

- `moonflare add <type> <name>` - Add new project
- `moonflare build [project]` - Build projects
- `moonflare deploy [project]` - Deploy to Cloudflare
- `moonflare dev [project]` - Start development server

## Learn More

- [Moonflare Documentation](https://moonflare.dev)
- [Moon Documentation](https://moonrepo.dev)
- [Cloudflare Developers](https://developers.cloudflare.com)